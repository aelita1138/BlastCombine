import asyncio
import os
from aiogram import Router, F
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineQueryResultArticle, InputTextMessageContent, InlineQuery, Message, Document, InlineKeyboardButton
from app.database.models import Account
from app.database.requests import add_account_for_user, create_stats, get_user_accounts_by_tg_id, get_user_by_tg_id
from app.keyboards.menu import generate_back_button

from pyrogram import Client

class AddAccount(StatesGroup):
    waiting_for_session_file = State()

profile_router = Router()

my_profile_text = """
–û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:
üìá –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: 7628273384
üí≥ –°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
üîê 2FA –ø–∞—Ä–æ–ª—å: 0

- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è:
üë• –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –≤ –±–æ—Ç–∞: 0 —à—Ç.
‚ûï –ó–∞–∏–Ω–≤–∞–π—á–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: 0 —à—Ç.
üì∫ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –∏—Å—Ç–æ—Ä–∏–π: 0 —à—Ç.
üì© –û—Ç–º–µ—á–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: 0 —à—Ç.
üí¨ –û—Å—Ç–∞–≤–ª–µ–Ω–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: 0 —à—Ç.
üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ –∏—Å—Ç–æ—Ä–∏–π: 0 —à—Ç.
‚ù§Ô∏è –ü–æ—Å—Ç–∞–≤–ª–µ–Ω–æ —Ä–µ–∞–∫—Ü–∏–π –Ω–∞ –∏—Å—Ç–æ—Ä–∏–∏: 0 —à—Ç.
üõ† –í—ã–ø–æ–ª–Ω–µ–Ω–æ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∑–∞–¥–∞—á: 0 —à—Ç.

- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤:
üöÄ –í–∞–ª–∏–¥–Ω—ã–µ: 0 —à—Ç.
üü¢ –í —Ä–∞–±–æ—Ç–µ: 0 —à—Ç.
‚ò†Ô∏è –ù–µ—Ä–∞–±–æ—á–∏–µ: 0 —à—Ç.
üö´ –°–ø–∞–º-–±–ª–æ–∫: 0 —à—Ç.

üë• –ó–∞–∏–Ω–≤–∞–π—á–µ–Ω–æ —Å –∞–∫–∫–∞—É–Ω—Ç–æ–≤: 0 —Ä–∞–∑
üí¨ –û—Å—Ç–∞–≤–ª–µ–Ω–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: 0 —à—Ç.
üì∫ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –∏—Å—Ç–æ—Ä–∏–π: 0 —à—Ç.
üì© –û—Ç–º–µ—á–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: 0 —à—Ç.
üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ –∏—Å—Ç–æ—Ä–∏–π: 0 —à—Ç.
‚ù§Ô∏è –ü–æ—Å—Ç–∞–≤–ª–µ–Ω–æ —Ä–µ–∞–∫—Ü–∏–π –Ω–∞ –∏—Å—Ç–æ—Ä–∏–∏: 0 —à—Ç.
"""

@profile_router.callback_query(F.data == "menu:profile")
async def handler_my_profile(query: CallbackQuery):
    await query.message.edit_text(text=my_profile_text, reply_markup=InlineKeyboardMarkup(inline_keyboard=[await generate_back_button("main_menu")]))


@profile_router.inline_query(F.query == "my_profiles")
async def handler_my_profiles(inline_query: InlineQuery):
    accounts = await get_user_accounts_by_tg_id(tg_id=inline_query.from_user.id)
    accounts = accounts if accounts else []

    results = []

    # üîπ –ö–Ω–æ–ø–∫–∞ "–î–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç" –≤—Å–µ–≥–¥–∞ –ø–µ—Ä–≤–∞—è
    results.append(
        InlineQueryResultArticle(
            id="add_account",
            title="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç",
            description="–ù–∞–∂–º–∏, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç.",
            thumbnail_url="https://icon-library.com/images/my-account-icon/my-account-icon-24.jpg",
            input_message_content=InputTextMessageContent(
                message_text="add new account"
            )
        )
    )

    # üîπ –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç—ã ‚Äî –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –∏—Ö
    if accounts:
        for account in accounts:
            results.append(
                InlineQueryResultArticle(
                    id=str(account.id),
                    title=f"{account.first_name} {account.last_name or ''}".strip(),
                    description=f"@{account.username}" if account.username else "–ë–µ–∑ username",
                    thumbnail_url="https://icon-library.com/images/my-account-icon/my-account-icon-24.jpg",
                    input_message_content=InputTextMessageContent(
                        message_text=f"–ê–∫–∫–∞—É–Ω—Ç: {account.first_name} @{account.username or '‚Äî'}"
                    )
                )
            )
    else:
        results.append(
            InlineQueryResultArticle(
                id="no_accounts",
                title="–£ —Ç–µ–±—è –µ—â—ë –Ω–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–æ–≤...",
                description="–î–æ–±–∞–≤—å —Å–≤–æ–π –ø–µ—Ä–≤—ã–π Telegram-–∞–∫–∫–∞—É–Ω—Ç",
                thumbnail_url="https://icon-library.com/images/my-account-icon/my-account-icon-24.jpg",
                input_message_content=InputTextMessageContent(
                    message_text="add new account"
                )
            )
        )
    
    await inline_query.answer(results, cache_time=1)


# –ù–æ–≤—ã–π —Ö–µ–Ω–¥–ª–µ—Ä: –ø–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ –ø–æ —Ç–µ–∫—Å—Ç—É "–ê–∫–∫–∞—É–Ω—Ç: ..."
@profile_router.message(F.text.startswith("–ê–∫–∫–∞—É–Ω—Ç: "))
async def show_account_info(message: Message):
    username = message.text.split("@")[-1].strip()
    accounts = await get_user_accounts_by_tg_id(tg_id=message.from_user.id)
    account = next((acc for acc in accounts if acc.username == username), None)

    if not account:
        await message.answer("–ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    stats = account.stats
    if not stats:
        await create_stats(account.id)
        accounts = await get_user_accounts_by_tg_id(tg_id=message.from_user.id)
        account = next((acc for acc in accounts if acc.username == username), None)
        stats = account.stats

    account_text = f"""
üë®‚Äçüíª <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ</b>
‚îú <b>ID:</b> {account.account_tg_id}
‚îú <b>–ò–º—è –∏ —Ñ–∞–º–∏–ª–∏—è:</b> {account.first_name} {account.last_name or ''}
‚îú <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> –ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ
‚îú <b>Username:</b> @{account.username or "‚Äî"}
‚îú <b>–ü—Ä–µ–º–∏—É–º:</b> –ù–µ—Ç
‚îú <b>–ü—Ä–æ–∫—Å–∏:</b> {account.proxy_string if account.proxy_host else "–ù–µ—Ç"}
‚îî <b>–î–æ–±–∞–≤–ª–µ–Ω:</b> {account.created_at.strftime('%d.%m.%Y') if account.created_at else "‚Äî"}

üí¨ <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å—Å—ã–ª–æ–∫:</b>
‚îú –ó–∞ —Å–µ–≥–æ–¥–Ω—è: {stats.mailing_today} —à—Ç.
‚îú –ó–∞ –º–µ—Å—è—Ü: {stats.mailing_month} —à—Ç.
‚îî –ó–∞ –≤—Å—ë –≤—Ä–µ–º—è: {stats.mailing_total} —à—Ç.

üì¢ <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤:</b>
‚îú –ó–∞ —Å–µ–≥–æ–¥–Ω—è: {stats.comments_today} —à—Ç.
‚îú –ó–∞ –º–µ—Å—è—Ü: {stats.comments_month} —à—Ç.
‚îî –ó–∞ –≤—Å—ë –≤—Ä–µ–º—è: {stats.comments_total} —à—Ç.

üíå <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–º–µ—Ç–æ–∫ –≤ —Å—Ç–æ—Ä–∏—Å:</b>
‚îú –ó–∞ —Å–µ–≥–æ–¥–Ω—è: {stats.story_tags_today} —à—Ç.
‚îú –ó–∞ –º–µ—Å—è—Ü: {stats.story_tags_month} —à—Ç.
‚îî –ó–∞ –≤—Å—ë –≤—Ä–µ–º—è: {stats.story_tags_total} —à—Ç.

üì¢ <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ —Å—Ç–æ—Ä–∏—Å:</b>
‚îú –ó–∞ —Å–µ–≥–æ–¥–Ω—è: {stats.stories_viewed_today} —à—Ç.
‚îú –ó–∞ –º–µ—Å—è—Ü: {stats.stories_viewed_month} —à—Ç.
‚îî –ó–∞ –≤—Å—ë –≤—Ä–µ–º—è: {stats.stories_viewed_total} —à—Ç.

üíï <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ–∞–∫—Ü–∏–π –Ω–∞ —Å—Ç–æ—Ä–∏—Å:</b>
‚îú –ó–∞ —Å–µ–≥–æ–¥–Ω—è: {stats.story_reactions_today} —à—Ç.
‚îú –ó–∞ –º–µ—Å—è—Ü: {stats.story_reactions_month} —à—Ç.
‚îî –ó–∞ –≤—Å—ë –≤—Ä–µ–º—è: {stats.story_reactions_total} —à—Ç.

üì≤ <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–Ω–≤–∞–π—Ç–∞:</b>
‚îú –ó–∞ —Å–µ–≥–æ–¥–Ω—è: {stats.invites_today} —à—Ç.
‚îú –ó–∞ –º–µ—Å—è—Ü: {stats.invites_month} —à—Ç.
‚îî –ó–∞ –≤—Å—ë –≤—Ä–µ–º—è: {stats.invites_total} —à—Ç.
"""

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üßæ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", url=f"https://t.me/{account.username}")],
        [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç", callback_data=f"delete:{account.id}")],
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–∫—Å–∏", switch_inline_query_current_chat=f"proxy:{account.id}")]
    ])

    await message.answer(account_text, parse_mode="HTML", reply_markup=keyboard)

@profile_router.message(F.text == "add new account")
async def cmd_add_account(message: Message, state: FSMContext):
    await message.answer("–û—Ç–ø—Ä–∞–≤—å .session —Ñ–∞–π–ª:")
    await state.set_state(AddAccount.waiting_for_session_file)


@profile_router.message(AddAccount.waiting_for_session_file, F.document)
async def handle_session_file(message: Message, state: FSMContext):
    file = message.document
    if not file.file_name.endswith(".session"):
        await message.answer("–≠—Ç–æ –Ω–µ .session —Ñ–∞–π–ª.")
        return

    tg_id = message.from_user.id
    session_dir = f"app/sessions/{tg_id}"
    os.makedirs(session_dir, exist_ok=True)

    file_path = f"{session_dir}/{file.file_name}"

    await message.bot.download(file, destination=file_path)

    try:
        app = Client(
            name=file.file_name.replace(".session", ""),
            api_id=os.getenv("API_ID"),
            api_hash=os.getenv("API_HASH"),
            workdir=session_dir
        )
        await app.start()
        me = await app.get_me()

        user = await get_user_by_tg_id(tg_id=message.from_user.id)
        await add_account_for_user(
            user_id=user.id,
            account_tg_id=me.id,
            session_file=file_path,
            first_name=me.first_name,
            last_name=me.last_name,
            username=me.username
        )

        await app.stop()
        await message.answer(f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç {me.id} | {me.first_name} –¥–æ–±–∞–≤–ª–µ–Ω.")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        try:
            await app.stop()
        except:
            pass
    await state.clear()
