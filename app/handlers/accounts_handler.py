import asyncio
import os
from aiogram import Router, F
from aiogram.types import CallbackQuery,  InlineQueryResultArticle, InputTextMessageContent, InlineQuery, Message, Document, InlineKeyboardButton, InlineKeyboardMarkup
from app.keyboards.accounts import generate_account_profile_menu, generate_accounts_menu
from app.database.requests import add_account_for_user, create_stats, get_user_accounts_by_tg_id, get_user_by_tg_id
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from app.database.models import Account
from pyrogram import Client

class AddAccount(StatesGroup):
    waiting_for_session_file = State()

accounts_router = Router()


@accounts_router.callback_query(F.data == "menu:accounts")
async def handler_accounts(query: CallbackQuery):
    text = """
üë§–ú–µ–Ω—é –∞–∫–∫–∞—É–Ω—Ç–æ–≤

‚ùóÔ∏è–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ "–°–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤"

–ü–µ—Ä–µ–¥ –≤–∞–º –æ—Ç–∫—Ä–æ–µ—Ç—Å—è —Å–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –ø–æ–∏—Å–∫–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é, –∏–º–µ–Ω–∏ –∏–ª–∏ ID.

‚ûï –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ - –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É —Å–≤–µ—Ä—Ö—É –≤ –≤—ã–ø–∞–¥–∞—é—â–µ–º –º–µ–Ω—é

üöÆ –î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ - –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–µ–≥–æ –≤ –≤—ã–ø–∞–¥–∞—é—â–µ–º –º–µ–Ω—é, –ø–æ—Å–ª–µ —á–µ–≥–æ –±–æ—Ç –ø—Ä–∏—à–ª—ë—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ.
"""
    await query.message.edit_text(text=text, reply_markup=await generate_accounts_menu())

@accounts_router.inline_query(F.query == "accounts:list")
async def handler_my_accounts(inline_query: InlineQuery):
    accounts = await get_user_accounts_by_tg_id(tg_id=inline_query.from_user.id)
    results = [] # –°—é–¥–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏

    results.append(
        InlineQueryResultArticle(
            id="add_account",
            title="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç",
            description="–ù–∞–∂–º–∏, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç.",
            thumbnail_url="https://icon-library.com/images/my-account-icon/my-account-icon-24.jpg",
            input_message_content=InputTextMessageContent(
                message_text="add new account"
            )
        )
    )

    if accounts:
        for account in accounts:
            print(account)
            print(account.account_tg_id)
            results.append(
                InlineQueryResultArticle(
                    id=str(account.id),
                    title=f"{account.first_name} {account.last_name or ''}".strip(),
                    description=f"@{account.username}" if account.username else "–ë–µ–∑ username",
                    thumbnail_url="https://icon-library.com/images/my-account-icon/my-account-icon-24.jpg",
                    input_message_content=InputTextMessageContent(
                        message_text=f"show account: {account.account_tg_id}"
                    )
                )
            )
    else:
        results.append(
            InlineQueryResultArticle(
                id="no_accounts",
                title="–£ —Ç–µ–±—è –µ—â—ë –Ω–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–æ–≤...",
                description="–î–æ–±–∞–≤—å —Å–≤–æ–π –ø–µ—Ä–≤—ã–π Telegram-–∞–∫–∫–∞—É–Ω—Ç",
                thumbnail_url="https://icon-library.com/images/my-account-icon/my-account-icon-24.jpg",
                input_message_content=InputTextMessageContent(
                    message_text="add new account"
                )
            )
        )
    
    await inline_query.answer(results, cache_time=0)


def get_account(tg_id: int, accounts):
    return next((account for account in accounts if account.account_tg_id == tg_id), None)

async def get_account_stats(tg_id: int, message):
    accounts = await get_user_accounts_by_tg_id(tg_id=message.from_user.id)
    account = get_account(tg_id, accounts)
    
    if not account:
        return None, None

    if not account.stats:
        await create_stats(account_id=account.id)
        accounts = await get_user_accounts_by_tg_id(tg_id=message.from_user.id)
        account = get_account(tg_id, accounts)

    return account.stats, account


@accounts_router.message(F.text.startswith("show account:"))
async def show_account_info(message: Message):
    tg_id = int(message.text.split(":")[1].strip(""))
    stats, account = await get_account_stats(tg_id=tg_id, message=message)
            
    text = f"""
üë®‚Äçüíª <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ</b>
‚îú <b>ID:</b> {account.account_tg_id}
‚îú <b>–ò–º—è –∏ —Ñ–∞–º–∏–ª–∏—è:</b> {account.first_name} {account.last_name or ''}
‚îú <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> –ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ
‚îú <b>Username:</b> @{account.username or "‚Äî"}
‚îú <b>–ü—Ä–µ–º–∏—É–º:</b> –ù–µ—Ç
‚îú <b>–ü—Ä–æ–∫—Å–∏:</b> {account.proxy_string if account.proxy_host else "–ù–µ—Ç"}
‚îî <b>–î–æ–±–∞–≤–ª–µ–Ω:</b> {account.created_at.strftime('%d.%m.%Y') if account.created_at else "‚Äî"}

üí¨ <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å—Å—ã–ª–æ–∫:</b>
‚îú –ó–∞ —Å–µ–≥–æ–¥–Ω—è: {stats.mailing_today} —à—Ç.
‚îú –ó–∞ –º–µ—Å—è—Ü: {stats.mailing_month} —à—Ç.
‚îî –ó–∞ –≤—Å—ë –≤—Ä–µ–º—è: {stats.mailing_total} —à—Ç.

üì¢ <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤:</b>
‚îú –ó–∞ —Å–µ–≥–æ–¥–Ω—è: {stats.comments_today} —à—Ç.
‚îú –ó–∞ –º–µ—Å—è—Ü: {stats.comments_month} —à—Ç.
‚îî –ó–∞ –≤—Å—ë –≤—Ä–µ–º—è: {stats.comments_total} —à—Ç.

üíå <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–º–µ—Ç–æ–∫ –≤ —Å—Ç–æ—Ä–∏—Å:</b>
‚îú –ó–∞ —Å–µ–≥–æ–¥–Ω—è: {stats.story_tags_today} —à—Ç.
‚îú –ó–∞ –º–µ—Å—è—Ü: {stats.story_tags_month} —à—Ç.
‚îî –ó–∞ –≤—Å—ë –≤—Ä–µ–º—è: {stats.story_tags_total} —à—Ç.

üì¢ <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ —Å—Ç–æ—Ä–∏—Å:</b>
‚îú –ó–∞ —Å–µ–≥–æ–¥–Ω—è: {stats.stories_viewed_today} —à—Ç.
‚îú –ó–∞ –º–µ—Å—è—Ü: {stats.stories_viewed_month} —à—Ç.
‚îî –ó–∞ –≤—Å—ë –≤—Ä–µ–º—è: {stats.stories_viewed_total} —à—Ç.

üíï <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ–∞–∫—Ü–∏–π –Ω–∞ —Å—Ç–æ—Ä–∏—Å:</b>
‚îú –ó–∞ —Å–µ–≥–æ–¥–Ω—è: {stats.story_reactions_today} —à—Ç.
‚îú –ó–∞ –º–µ—Å—è—Ü: {stats.story_reactions_month} —à—Ç.
‚îî –ó–∞ –≤—Å—ë –≤—Ä–µ–º—è: {stats.story_reactions_total} —à—Ç.

üì≤ <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–Ω–≤–∞–π—Ç–∞:</b>
‚îú –ó–∞ —Å–µ–≥–æ–¥–Ω—è: {stats.invites_today} —à—Ç.
‚îú –ó–∞ –º–µ—Å—è—Ü: {stats.invites_month} —à—Ç.
‚îî –ó–∞ –≤—Å—ë –≤—Ä–µ–º—è: {stats.invites_total} —à—Ç.
"""
    await message.answer(text=text, parse_mode="HTML", reply_markup=await generate_account_profile_menu(account))


@accounts_router.message(F.text == "add new account")
async def cmd_add_account(message: Message, state: FSMContext):
    await message.answer("–û—Ç–ø—Ä–∞–≤—å .session —Ñ–∞–π–ª:")
    await state.set_state(AddAccount.waiting_for_session_file)


@accounts_router.message(AddAccount.waiting_for_session_file, F.document)
async def handle_session_file(message: Message, state: FSMContext):
    file = message.document
    if not file.file_name.endswith(".session"):
        await message.answer("–≠—Ç–æ –Ω–µ .session —Ñ–∞–π–ª.")
        return

    tg_id = message.from_user.id
    session_dir = f"app/sessions/{tg_id}"
    os.makedirs(session_dir, exist_ok=True)

    file_path = f"{session_dir}/{file.file_name}"

    await message.bot.download(file, destination=file_path)

    try:
        app = Client(
            name=file.file_name.replace(".session", ""),
            api_id=os.getenv("API_ID"),
            api_hash=os.getenv("API_HASH"),
            workdir=session_dir
        )
        await app.start()
        me = await app.get_me()

        user = await get_user_by_tg_id(tg_id=message.from_user.id)
        await add_account_for_user(
            user_id=user.id,
            account_tg_id=me.id,
            session_file=file_path,
            first_name=me.first_name,
            last_name=me.last_name,
            username=me.username
        )

        await app.stop()
        await message.answer(f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç {me.id} | {me.first_name} –¥–æ–±–∞–≤–ª–µ–Ω.")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        try:
            await app.stop()
        except:
            pass
    await state.clear()
